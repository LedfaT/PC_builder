// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}


/////////// User     table ///////////
model User {
    id        Int   @id @default(autoincrement())
    email     String   @unique
    username      String 
    password  String
    user_role  UserRole @default(USER)
    isActivated Boolean @default(false)
    activationLink String?
    tokens Token?
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt

    @@map("user")
}

enum UserRole {
    USER
    ADMIN

}
/////////// User table ///////////


/////////// Token table ///////////
model Token{
    id Int @id @default(autoincrement())
    refreshToken String 
    userId Int  @unique
    user User @relation(fields: [userId], references: [id])

    @@map("token")
}
/////////// Token table ///////////

//////////// CPU table ///////////
model CPU {
    id Int @id @default(autoincrement())
    title String
    cost Float
    description String? @db.Text
    image String? @db.Text
    cores String
    threads String
    Architecture String
    cache String
    clock String
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt

    @@map("cpu")
}
//////////// CPU table ///////////

//////////// GPU table ///////////
model GPU {
  id            Int     @id @default(autoincrement())
  title         String
  description   String? @db.Text
  cores         String
  image         String? @db.Text
  threads       String
  vram_quantity String
  cache         String
  clock         String
  vram_type     String
  cost          Float?

  @@map("gpu")
}
//////////// GPU table ///////////

